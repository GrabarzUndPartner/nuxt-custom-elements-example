name: Main
on:
  push:
    branches:
      - main

jobs:
  install:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Install
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: cache node_modules
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright/
            ~\AppData\Local\ms-playwright\
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/package-lock.json')) }}
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test
        run: npm run test

  semantic-version:
    name: Semantic Release
    needs: install
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Versioning
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx -p semantic-release -p @semantic-release/git -p @semantic-release/changelog -p @semantic-release/exec -p semantic-release-github semantic-release --provider=github

  build:
    name: Build
    needs: semantic-version
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: cache node_modules
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright/
            ~\AppData\Local\ms-playwright\
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/package-lock.json')) }}
      - name: Build
        run: |
          npm run generate -- examples/default
          touch dist/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/
          DIST_PATH: ../../dist

      # tailwind-css
      - name: BuildTailwindCss
        run: |
          npm run generate -- examples/tailwind-css
          unlink dist/tailwind-css/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/tailwind-css/
          DIST_PATH: ../../dist/tailwind-css

      # vuetify
      - name: BuildVuetify
        run: |
          npm run generate -- examples/vuetify
          unlink dist/vuetify/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/vuetify/
          DIST_PATH: ../../dist/vuetify

      # vue-i18n
      - name: BuildVueI18n
        run: |
          npm run generate -- examples/vue-i18n
          unlink dist/vue-i18n/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/vue-i18n/
          DIST_PATH: ../../dist/vue-i18n

      # vue-router
      - name: BuildVueRouter
        run: |
          npm run generate -- examples/vue-router
          unlink dist/vue-router/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/vue-router/
          DIST_PATH: ../../dist/vue-router

      # vuex
      - name: BuildVuex
        run: |
          npm run generate -- examples/vuex
          unlink dist/vuex/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/vuex/
          DIST_PATH: ../../dist/vuex

      # external
      - name: BuildExternal
        run: |
          npm run generate -- examples/external
          unlink dist/external/.nojekyll
        env:
          BASE_URL: /nuxt-custom-elements-example/external/
          DIST_PATH: ../../dist/external

      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: buildArtifact
          path: dist

  deploy-ghpages:
    name: Deploy (GH-Pages)
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: buildArtifact
          path: public
      - name: Deploy to GH-Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: public
